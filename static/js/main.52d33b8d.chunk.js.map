{"version":3,"sources":["ColorBlock.js","ColorBlockContainer.js","App.js","reportWebVitals.js","index.js"],"names":["ColorBlock","props","useState","copyDisplayText","updateCopyDisplayText","displayHex","updateDisplayHex","className","style","backgroundColor","color","onMouseEnter","onMouseLeave","onClick","textToCopy","colorHex","navigator","clipboard","writeText","then","type","onChange","e","id","target","checked","isPinned","class","ColorBlockContainer","Array","fill","blockPinState","updatePin","randomizeColor","Math","floor","random","map","colors","updateColors","handleKeyDown","code","updatedColors","i","useEffect","document","addEventListener","removeEventListener","rgbToHex","rgbArray","hex","forEach","element","elementString","toString","hexComponent","length","setBlockPinned","index","newBlockPinState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2OAqDeA,EApDI,SAACC,GAAW,IAAD,EACqBC,mBAC/C,0BAF0B,mBACrBC,EADqB,KACJC,EADI,OAgBWF,oBAAS,GAhBpB,mBAgBrBG,EAhBqB,KAgBTC,EAhBS,KA2B5B,OACE,gCACE,sBACEC,UAAU,aACVC,MAAO,CAAEC,gBAAgB,OAAD,OAASR,EAAMS,MAAf,MACxBC,aAdmB,WACvBL,GAAiB,IAcbM,aAXiB,WACrBN,GAAiB,GACjBF,EAAsB,2BAUlBS,QAAS,kBA7BQC,EA6BYb,EAAMc,cA5BvCC,UAAUC,UAAUC,UAAUJ,GAAYK,MACxC,WACEf,EAAsB,cAExB,WACEA,EAAsB,mCANN,IAACU,GAwBnB,UAOE,mBAAGP,UAAU,UAAb,SAAwBF,EAAaJ,EAAMc,SAAW,OACtD,mBAAGR,UAAU,mBAAb,SACGF,EAAaF,EAAkB,UAGpC,kCACE,uBACEiB,KAAK,WACLC,SAAU,SAACC,GAAD,OAAOrB,EAAMoB,SAASpB,EAAMsB,GAAID,EAAEE,OAAOC,UACnDA,QAASxB,EAAMyB,WAEjB,sBAAMC,MAAM,QAAZ,4BCqBOC,EAlEa,WAC1B,IADgC,EAGG1B,mBAAS2B,MAF1B,GAE2CC,MAAK,IAHlC,mBAGzBC,EAHyB,KAGVC,EAHU,KAK1BC,EAAiB,WAKrB,MADkB,CAHAC,KAAKC,MAAM,IAAMD,KAAKE,UACpBF,KAAKC,MAAM,IAAMD,KAAKE,UACvBF,KAAKC,MAAM,IAAMD,KAAKE,YARX,EAaDlC,mBAC7B6B,EAAcM,KAAI,kBAAMJ,QAdM,mBAazBK,EAbyB,KAajBC,EAbiB,KAiB1BC,EAAgB,SAAClB,GACrB,GAAe,UAAXA,EAAEmB,KAAkB,CACtB,IAAMC,EAAgBJ,EAAOD,KAAI,SAAC3B,EAAOiC,GAAR,OAC/BZ,EAAcY,GAAKjC,EAAQuB,OAE7BM,EAAaG,KAIjBE,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWN,GAC9B,kBAAMK,SAASE,oBAAoB,UAAWP,MACpD,CAACA,IAEJ,IAAMQ,EAAW,SAACC,GAChB,IAAIC,EAAM,GAOV,OANAD,EAASE,SAAQ,SAACC,GAChB,IAAMC,EAAgBD,EAAQE,SAAS,IACnCC,EACuB,IAAzBF,EAAcG,OAAe,IAAMH,EAAgBA,EACrDH,GAAOK,KAEFL,GAGHO,EAAiB,SAACC,EAAOhC,GAC7B,IAAIiC,EAAgB,YAAO5B,GAC3B4B,EAAiBD,GAAShC,EAC1BM,EAAU2B,IAGZ,OACE,qBAAKpC,GAAG,iBAAR,SACGe,EAAOD,KAAI,SAAC3B,EAAOiC,GAClB,OACE,cAAC,EAAD,CAEEpB,GAAIoB,EACJjB,SAAUK,EAAcY,GACxBtB,SAAUoC,EACV/C,MAAO4B,EAAOK,GACd5B,SAAUiC,EAASV,EAAOK,KALrBA,SChDFiB,EAJH,WACV,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,SAM1BX,M","file":"static/js/main.52d33b8d.chunk.js","sourcesContent":["import { React, useState } from \"react\";\nconst ColorBlock = (props) => {\n  const [copyDisplayText, updateCopyDisplayText] = useState(\n    \"Click anywhere to copy\"\n  );\n\n  const clipboardCopy = (textToCopy) => {\n    navigator.clipboard.writeText(textToCopy).then(\n      function () {\n        updateCopyDisplayText(\"Copied!\");\n      },\n      function () {\n        updateCopyDisplayText(\"Sorry, text failed to copy:(\");\n      }\n    );\n  };\n\n  const [displayHex, updateDisplayHex] = useState(false);\n\n  const handleMouseEnter = () => {\n    updateDisplayHex(true);\n  };\n\n  const handleMouseOut = () => {\n    updateDisplayHex(false);\n    updateCopyDisplayText(\"Click anywhere to copy\");\n  };\n\n  return (\n    <div>\n      <div\n        className=\"ColorBlock\"\n        style={{ backgroundColor: `rgb(${props.color})` }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseOut}\n        onClick={() => clipboardCopy(props.colorHex)}\n      >\n        <p className=\"hexText\">{displayHex ? props.colorHex : null}</p>\n        <p className=\"copyInstructions\">\n          {displayHex ? copyDisplayText : null}\n        </p>\n      </div>\n      <label>\n        <input\n          type=\"checkbox\"\n          onChange={(e) => props.onChange(props.id, e.target.checked)}\n          checked={props.isPinned}\n        ></input>\n        <span class=\"label\"> ------</span>\n      </label>\n    </div>\n  );\n};\nexport default ColorBlock;\n","import { React, useState, useEffect } from \"react\";\nimport ColorBlock from \"./ColorBlock.js\";\n\nconst ColorBlockContainer = () => {\n  const numBlocks = 5;\n\n  const [blockPinState, updatePin] = useState(Array(numBlocks).fill(false));\n\n  const randomizeColor = () => {\n    const randomRed = Math.floor(255 * Math.random());\n    const randomGreen = Math.floor(255 * Math.random());\n    const randomBlue = Math.floor(255 * Math.random());\n    const randomRGB = [randomRed, randomGreen, randomBlue];\n    return randomRGB;\n  };\n\n  const [colors, updateColors] = useState(\n    blockPinState.map(() => randomizeColor())\n  );\n\n  const handleKeyDown = (e) => {\n    if (e.code === \"Space\") {\n      const updatedColors = colors.map((color, i) =>\n        blockPinState[i] ? color : randomizeColor()\n      );\n      updateColors(updatedColors);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n\n  const rgbToHex = (rgbArray) => {\n    let hex = \"\";\n    rgbArray.forEach((element) => {\n      const elementString = element.toString(16);\n      var hexComponent =\n        elementString.length === 1 ? \"0\" + elementString : elementString;\n      hex += hexComponent;\n    });\n    return hex;\n  };\n\n  const setBlockPinned = (index, isPinned) => {\n    let newBlockPinState = [...blockPinState];\n    newBlockPinState[index] = isPinned;\n    updatePin(newBlockPinState);\n  };\n\n  return (\n    <div id=\"BlockContainer\">\n      {colors.map((color, i) => {\n        return (\n          <ColorBlock\n            key={i}\n            id={i}\n            isPinned={blockPinState[i]}\n            onChange={setBlockPinned}\n            color={colors[i]}\n            colorHex={rgbToHex(colors[i])}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ColorBlockContainer;\n","import \"./App.css\";\nimport React from \"react\";\nimport ColorBlockContainer from \"./ColorBlockContainer.js\";\n\nconst App = () => {\n  return <ColorBlockContainer />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
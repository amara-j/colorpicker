[{"/Users/amara/Documents/RC/color-picker/src/index.js":"1","/Users/amara/Documents/RC/color-picker/src/reportWebVitals.js":"2","/Users/amara/Documents/RC/color-picker/src/App.js":"3","/Users/amara/Documents/RC/color-picker/src/ColorBlock.js":"4","/Users/amara/Documents/RC/color-picker/src/ColorBlockContainer.js":"5"},{"size":500,"mtime":1611865954748,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611765082395,"results":"8","hashOfConfig":"7"},{"size":186,"mtime":1611952964636,"results":"9","hashOfConfig":"7"},{"size":1419,"mtime":1611952742818,"results":"10","hashOfConfig":"7"},{"size":1878,"mtime":1611952965741,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"tyssjz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/amara/Documents/RC/color-picker/src/index.js",[],["24","25"],"/Users/amara/Documents/RC/color-picker/src/reportWebVitals.js",[],"/Users/amara/Documents/RC/color-picker/src/App.js",[],"/Users/amara/Documents/RC/color-picker/src/ColorBlock.js",[],"/Users/amara/Documents/RC/color-picker/src/ColorBlockContainer.js",["26"],"import { React, useState, useEffect } from \"react\";\nimport ColorBlock from \"./ColorBlock.js\";\n\nconst ColorBlockContainer = () => {\n  const numBlocks = 5;\n\n  const [blockPinState, updatePin] = useState(Array(numBlocks).fill(false));\n\n  const randomizeColor = () => {\n    const randomRed = Math.floor(255 * Math.random());\n    const randomGreen = Math.floor(255 * Math.random());\n    const randomBlue = Math.floor(255 * Math.random());\n    const randomRGB = [randomRed, randomGreen, randomBlue];\n    return randomRGB;\n  };\n\n  const [colors, updateColors] = useState(\n    blockPinState.map(() => randomizeColor())\n  );\n\n  const handleKeyDown = (e) => {\n    if (e.code === \"Space\") {\n      const updatedColors = colors.map((color, i) =>\n        blockPinState[i] ? color : randomizeColor()\n      );\n      updateColors(updatedColors);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n\n  const rgbToHex = (rgbArray) => {\n    let hex = \"\";\n    rgbArray.forEach((element) => {\n      const elementString = element.toString(16);\n      var hexComponent =\n        elementString.length === 1 ? \"0\" + elementString : elementString;\n      hex += hexComponent;\n    });\n    return hex;\n  };\n\n  const setBlockPinned = (index, isPinned) => {\n    let newBlockPinState = [...blockPinState];\n    newBlockPinState[index] = isPinned;\n    updatePin(newBlockPinState);\n  };\n\n  return (\n    <div id=\"BlockContainer\">\n      {colors.map((color, i) => {\n        return (\n          <ColorBlock\n            key={i}\n            id={i}\n            isPinned={blockPinState[i]}\n            onChange={setBlockPinned}\n            color={colors[i]}\n            colorHex={rgbToHex(colors[i])}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ColorBlockContainer;\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":21,"column":9,"nodeType":"33","endLine":28,"endColumn":4},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"react-hooks/exhaustive-deps","The 'handleKeyDown' function makes the dependencies of useEffect Hook (at line 33) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'handleKeyDown' in its own useCallback() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation"]